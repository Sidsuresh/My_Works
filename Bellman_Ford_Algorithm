#include <stdio.h>
#include <stdlib.h>
int inp[10][10];

int min(int a, int b)
{
  int min;
  min = (a > b) ? a : b;
  return(min);
}

void initialize(int n)
{
  for(int i = 1; i <= n; ++i)
  {
    for(int j = 1; j <= n; ++j)
      inp[i][j] = 999;
  }
}

void calcdist(int n)
{
  int i, j, k;
  for(k = 1; k <= n; ++k)
  {
    for(i = 1; i <= n; ++i)
    {
      for(j = 1; j <= n; ++j)
      {
         if(i != j)
         inp[i][j] = 0;
         else
         inp[i][j] = min(inp[i][j], inp[i][k] + inp[k][j]);
      }
    }
  }
}

void copy(int c, char ch[20])
{
  char dest1[20] = "Restaurant";
  char dest2[20] = "Supermarket";
  char dest3[20] = "House";
  char dest4[20] = "Cinema";
  switch(c)
  {
    case 1: strcpy(ch, dest1);
            break;
    case 2: strcpy(ch, dest2);
            break;
    case 3: strcpy(ch, dest3);
            break;
    case 4: strcpy(ch, dest4);
            break;
  }
}

void main()
{
  int w, n, e, u, v, i, j;
  printf("\nEnter the number of vertices: ");
  scanf("%d", &n);
  printf("\nEnter the number of edges: ");
  scanf("%d", &e);
  initialize(n);
  for(int i = 1; i <= e; ++i)
  {
    printf("\nEnter the two vertices of edge %d along with its weight: ", i);
    scanf("%d %d %d", &u, &v, &w);
    inp[u][v] = w;
  }
  printf("\nInput Matrix: ");
  for(i = 1; i <= n; ++i)
  {
    for(j = 1; j <= n; ++j)
      printf("%d ", inp[i][j]);
    printf("\n");
  }
  
  calcdist(n);
  
  printf("\nMatrix after finding shortest distance: \n");
  for(i = 1; i <= n; ++i)
  {
    for(j = 1; j <= n; ++j)
    {
      printf("%d ", inp[i][j]);
    }
    printf("\n");
  }
  
  printf("\nThe shortest paths are: ");
  for(i = 1; i <= n; ++i)
  {
    for(j = 1; j <= n; ++j)
    {
      char destin1[20], destin2[20];
      if(i != j)
      {
        copy(i, destin1);
        copy(j, destin2);
        printf("\n%s --> %s = %d", destin1, destin2, inp[i][j]);
      }
    }
  }
}
