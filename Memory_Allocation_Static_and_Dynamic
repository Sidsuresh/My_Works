#include <stdio.h>

int mn,pn,mem[20],pro[20],alloc[20],flag[20];
void resetalloc()
{
        for(int i = 0; i < pn; ++i)
                alloc[i] = -1;
}

void firstfit()
{
        resetalloc();
        int bsize[20];
        for(int i = 0; i < mn; ++i)
                bsize[i] = mem[i];
        for(int i = 0; i < pn; ++i)
        {
                for(int j = 0; j < mn; ++j)
                {
                        if(bsize[j] >= pro[i])
                        {
                                alloc[i] = j;
                                bsize[j] -= pro[i];
                                break;
                        }
                }
        }
}

void sfirstfit()
{
        resetalloc();
        int bsize[20];
        for(int i = 0; i < mn; ++i)
                bsize[i] = mem[i];
        for(int i = 0; i < pn; ++i)
        {
                for(int j = 0; j < mn; ++j)
                {
                        if(bsize[j] >= pro[i])
                        {
                                alloc[i] = j;
                                bsize[j] = 0;
                                break;
                        }
                }
        }

}

int smallest(int bsize[20], int temp[20], int k)
{
        int small = 0;
        if(k==1)
                return(temp[0]);
        else
        {
                for(int i = 1; i < k; ++i)
                {
                        if(bsize[temp[small]] > bsize[temp[i]])
                                small = i;
                }
                return(temp[small]);
        }
}
int biggest(int bsize[20], int temp[20], int k)
{
        int big = 0;
        if(k==1)
                return(temp[0]);
        else
        {
                for(int i = 1; i < k; ++i)
                {
                        if(bsize[temp[big]] < bsize[temp[i]])
                                big = i;
                }
                return(temp[big]);
        }
}
void bestfit()
{
        int temp[20],k;
        resetalloc();
        int bsize[20];
        for(int i = 0; i < mn; ++i)
                bsize[i] = mem[i];
        for(int i = 0; i < pn; ++i)
        {
                k = 0;
                for(int j = 0; j < mn; ++j)
                {
                        if(bsize[j] >= pro[i])
                        {
                                temp[k] = j;
                                k++;
                        }
                }
                if(k > 0)
                {
                        int pos = smallest(bsize, temp, k);
                        alloc[i] = pos;
                        bsize[pos] -= pro[i];
                }
        }
}
void sbestfit()
{
        int temp[20],k;
        resetalloc();
        int bsize[20];
        for(int i = 0; i < mn; ++i)
                bsize[i] = mem[i];
        for(int i = 0; i < pn; ++i)
        {
                k = 0;
                for(int j = 0; j < mn; ++j)
                {
                        if(bsize[j] >= pro[i])
                        {
                                temp[k] = j;
                                k++;
                        }
                }
                if(k > 0)
                {
                        int pos = smallest(bsize, temp, k);
                        alloc[i] = pos;
                        bsize[pos] = 0;
                }
        }
}
void worstfit()
{
        int temp[20],k;
        resetalloc();
        int bsize[20];
        for(int i = 0; i < mn; ++i)
                bsize[i] = mem[i];
        for(int i = 0; i < pn; ++i)
        {
                k = 0;
                for(int j = 0; j < mn; ++j)
                {
                        if(bsize[j] >= pro[i])
                        {
                                temp[k] = j;
                                k++;
                        }
                }
                if(k > 0)
                {
                        int pos = biggest(bsize, temp, k);
                        alloc[i] = pos;
                        bsize[pos] -= pro[i];
                }
        }
}
void sworstfit()
{
        int temp[20],k;
        resetalloc();
        int bsize[20];
        for(int i = 0; i < mn; ++i)
                bsize[i] = mem[i];
        for(int i = 0; i < pn; ++i)
        {
                k = 0;
                for(int j = 0; j < mn; ++j)
                {
                        if(bsize[j] >= pro[i])
                        {
                                temp[k] = j;
                                k++;
                        }
                }
                if(k > 0)
                {
                        int pos = biggest(bsize, temp, k);
                        alloc[i] = pos;
                        bsize[pos] = 0;
                }
        }
}
void disp()
{
        for(int i = 0; i < pn; ++i)
        {
                printf("\nProcess%d: ", i+1);
                if(alloc[i] != -1)
                        printf("\tBlock%d", alloc[i]+1);
                else
                        printf("\tNot Allocated");
        }
}
int main()
{
        int opt;
        printf("\nEnter the number of empty memory blocks: ");
        scanf("%d", &mn);
        printf("\nEnter the number of processes: ");
        scanf("%d", &pn);
        printf("\nEnter the memory size for each empty block:");
        for(int i = 0; i < mn; ++i)
        {
                printf("\nBlock%d: ", i+1);
                scanf("%d", &mem[i]);
        }
        printf("\nEnter the processes:");
        for(int i = 0; i < pn; ++i)
        {
                printf("\nProcess%d: ", i+1);
                scanf("%d", &pro[i]);
        }
        do
        {
                int ch, ch1, ch2;
                printf("\nMemory Allocation\n1. Static Partitioning\n2. Dynamic Partitioning\nEnter 
your option: ");
                scanf("%d", &ch);
                if(ch == 1)
                {
                        do
                        {
                                printf("\n1.First Fit\n2.Best Fit\n3.Worst Fit\nEnter your option: ");
                                scanf("%d", &ch1);
                                switch(ch1)
                                {
                                        case 1: {
                                                        printf("\nStatic First Fit");
                                                        sfirstfit();
                                                        disp();
                                                     }
		          	          break;
                                        case 2: {
                                                        printf("\nStatic Best Fit");
                                                        sbestfit();
                                                        disp();
                                                      }
                                                      break;
                                        case 3: {
                                                        printf("\nStatic Worst Fit");
                                                        sworstfit();
                                                        disp();
                                                      }
                                                      break;
                                        default: printf("\nEnter the correct option");
                                }
                                printf("\nDo you want to continue(0 for No/1 for Yes): ");
                                scanf("%d", &ch2);
                        }while(ch2 == 1);
                }
                else if(ch == 2)
                {
                        do
                        {
                                printf("\n1.First Fit\n2.Best Fit\n3.Worst Fit\nEnter your option: ");
                                scanf("%d", &ch1);
                                switch(ch1)
                                {
                                        case 1: {
                                                        printf("\nDynamic First Fit");
                                                        firstfit();
                                                        disp();
                                                      }
                                                      break;
                                        case 2: {
                                                        printf("\nDynamic Best Fit");
                                                        bestfit();
                                                        disp();
			          }
                                                     break;
                                        case 3: {
                                                        printf("\nDynamic Worst Fit");
                                                        worstfit();
                                                        disp();
                                                      }
                                                      break;
                                        default: printf("\nEnter the correct option");
                                }
                                printf("\nDo you want to continue(0 for No/1 for Yes): ");
                                scanf("%d", &ch2);
                        }while(ch2 == 1);
                }
                else
                {
                        printf("\nEnter the correct option");
                }
                printf("\nDo you want to exit(0 for Yes/1 for No): ");
                scanf("%d", &opt);
        }while(opt == 1);
        return(0);
}
