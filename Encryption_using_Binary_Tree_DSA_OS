#include <iostream>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <string>
#include <ctype.h>
using namespace std;

int n = 0;

struct Entries
{
    string IO;
    string PO;
    int len = 3;
}E[50];


typedef struct Node
{
    string s;
    Node* left;
    Node* right;
};

//Function to create a new node
Node* create(string data)
{
    Node* newN = new(Node);
    newN->s = data;
    newN->left = NULL;
    newN->right = NULL;
    return(newN);
}

//Function to input string into nodes in BFS format
void insert(Node* temp, string data)
{
    queue<Node*> q;
    q.push(temp);

    while (!q.empty())
    {
        Node* temp = q.front();
        q.pop();

        if (!temp->left)
        {
            temp->left = create(data);
            break;
        }
        else
            q.push(temp->left);

        if (!temp->right)
        {
            temp->right = create(data);
            break;
        }
        else
            q.push(temp->right);
    }
}

//Function for inorder traversal 
void inorder(Node* N, string &SIN)
{
    if (N != NULL)
    {
        inorder(N->left, SIN);
        SIN += N->s;
        inorder(N->right, SIN);
    }
}

//Function for Preorder traversal
void preorder(Node* N, string &SPRE)
{
    if (N == NULL)
        return;
    SPRE += N->s;
    preorder(N->left, SPRE);
    preorder(N->right, SPRE);
}

//Function to get the mirror of a tree
void reflect(Node* N)
{
    if (N == NULL)
        return;
    else
    {
        Node* temp;
        reflect(N->left);
        reflect(N->right);
        temp = N->left;
        N->left = N->right;
        N->right = temp;
    }
}

//Encryption function
void encryption(int n)
{
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    string str1, temp;
    int len, lenn, numn, dif;
    cout << "\nEnter the string: ";
    getline(cin, str1);
    cout << "\nString: " << str1;
    len = str1.length();
    lenn = 3;
    dif = len % lenn;
    if (dif != 0)
    {
        for (int i = 0; i < (lenn - dif); ++i)
            str1 += " ";
    }

    temp = str1.substr(0, lenn);
    Node* root = create(temp);

    for (int i = lenn; i < len; i += lenn)
    {
        temp = str1.substr(i, lenn);
        insert(root, temp);
    }

    reflect(root);
    cout << endl;
    cout << "\nInorder: " << endl;
    string SIN, SPRE;
    inorder(root, SIN);
    cout << SIN;
    cout << "\nPreorder: " << endl;
    preorder(root, SPRE);
    cout << SPRE;
    E[n].IO = SIN;
    E[n].PO = SPRE;
    E[n].len = lenn;
}

//Decryption 

//Preorder
//Function to search for element in Inorder traversal
void prsearch(int pos[2], string in, int strt, int end, string value, int lenn)
{
    string tempi;
    for (int i = strt; i <= end; i += lenn)
    {
        tempi = in.substr(i, lenn);
        if (tempi == value)
        {
            pos[0] = i;
            pos[1] = i + lenn;
            break;
        }
    }
}

//Function to construct tree from PrO and IO traversal
Node* prbuildTree(string in, string pre, int iStart, int iEnd, int lenn, int ref)
{
    static int preIndex;
    if (ref == 0)
        preIndex = 0;
 
    int pos[2], start, end;

    if (iStart > iEnd)
        return NULL;

    string temp = pre.substr(preIndex, lenn);
    Node* tNode = create(temp);
    preIndex += lenn;

    if (iStart == iEnd)
        return tNode;

    prsearch(pos, in, iStart, iEnd, temp, lenn);

    start = pos[0];
    end = pos[1];

    tNode->left = prbuildTree(in, pre, iStart, start - 1, lenn, 1);
    tNode->right = prbuildTree(in, pre, end, iEnd, lenn, 1);
    return(tNode);
}

//Function to print the string from tree in BFS format
string printLevelOrder(Node* root)
{
    string p = "";
    if (root == NULL)
        return("");

    queue<Node*> q;
    q.push(root);
    while (q.empty() == false)
    {
        Node* N = q.front();
        string temp = N->s;
        p += temp;
        q.pop();
        if (N->left != NULL)
            q.push(N->left);
        if (N->right != NULL)
            q.push(N->right);
    }
    return(p);
}

// Search if the data exists in Entries

int Isearch(string I, int& chk1)
{
    chk1 = 0;
    int i;
    for (i = 0; i < n; ++i)
    {
        if (E[i].IO == I)
        {
            chk1 = 1;
            break;
        }
    }
    return(i);
}

//Decryption
void decryption()
{
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    string str1, str2, str3;
    int lenn = 3, lenp, dif1, dif2, chk1, chk2;
    cout << "\nEnter the Inorder string: ";
    getline(cin, str1);
    int len1 = str1.length();
    dif1 = len1 % lenn;
    if (dif1 != 0)
    {
        for (int i = 0; i < (lenn - dif1); ++i)
            str1 += " ";
    }
    int i = Isearch(str1, chk1);
    if (chk1 == 0)
    {
        cout << "\Invalid In-Order Entry";
    }
    else
    {
        cout << "\nValid";
        cout << "\nEnter the Preorder string: ";
        getline(cin, str2);
        int len2 = str2.length();
        dif2 = len2 % lenn;
        if (dif2 != 0)
        {
            for (int i = 0; i < (lenn - dif2); ++i)
                str2 += " ";
        }
        if (str2 == E[i].PO)
        {
            cout << "\nValid";
            Node* root = prbuildTree(str1, str2, 0, str1.length(), lenn, 0);
            reflect(root);
            string ostr = printLevelOrder(root);
            cout << "\nDecrypted String: " << ostr;
        }
        else
        {
            cout << "\Invalid Pre-Order Entry";
        }
    }
}

int main()
{
    char ch;
    do
    {
        int opt;
        cout << "\nEnter 1 for Encryption.\nEnter 2 for Decryption";
        cout << "\nEnter the option: ";
        cin >> opt;
        switch (opt)
        {
        case 1: {
            system("cls");
            cout << "\n\t\t\t\t\tX-X-X-ENCRYPTION-X-X-X";
            encryption(n);
            n++;
        }
              break;
        case 2: {
            system("cls");
            cout << "\n\t\t\t\t\tX-X-X-DECRYPTION-X-X-X";
            decryption();
        }
              break;
        case 3: {
            system("cls");
            cout << "\n\t\t\t\t\tX-X-X-ENTRIES-X-X-X";
            for (int i = 0; i < n; ++i)
            {
                cout << "\nI: " << i + 1;
                cout << "\nInorder: " << E[i].IO;
                cout << "\nPreorder: " << E[i].PO;
                cout << "\nLen: " << E[i].len;
            }
        }
              break;
        default:cout << "\nEnter the correct option";
        }
        cout << "\nDo you want to continue: ";
        cin >> ch;
    } while (toupper(ch) == 'Y');
    return(0);
}

