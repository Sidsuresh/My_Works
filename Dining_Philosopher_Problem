#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>

#define N 5
#define Left (i+4)%N
#define Right (i+1)%N
#define T 0
#define H 1
#define E 2

int state[N];
int philnum[N];

sem_t mut;
sem_t sem_phil[N];

void test(int i)
{
        if(state[i] == H && state[Left] != E && state[Right] != E)
        {
                state[i] = 2;
                printf("\nPhilosopher %d is eating", i);
                sem_post(&sem_phil[i]);
        }
}

void take(int i)
{
        sem_wait(&mut);
        state[i] = H;
        printf("\nPhilosopher %d is hungry", i);
        test(i);
        sem_post(&mut);
        sem_wait(&sem_phil[i]);
}

void put(int i)
{
        sem_wait(&mut);
        state[i] = T;
        printf("\nPhilosopher %d is thinking", i);
        test(Left);
        test(Right);
        sem_post(&mut);
}

void *phil(void *p)
{
        int i = *((int *)p);
        while(1)
        {
                sleep(1);
                take(i);
                sleep(0);
                put(i);
        }
}

int main()
{
        int i;
        pthread_t tid[N];
        printf("\nDining Philosopher");
        for(i = 0; i < N; ++i)
                philnum[i] = i;
        sem_init(&mut,0,1);
        for(i = 0; i < N; ++i)
                sem_init(&sem_phil[i],0,0);
        for(i = 0; i < N; ++i)
                pthread_create(&tid[i], NULL, phil, &philnum[i]);
        for(i = 0; i < N; ++i)
                pthread_join(tid[i], NULL);
        sem_close(&mut);
        for(i = 0; i < N; i++)
                sem_close(&sem_phil[i]);
        return(0);
}
